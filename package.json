{
  "name": "nuxt-electron-boilerplate",
  "description": "A boilerplate for building cross-platform desktop applications with Nuxt and Electron.",
  "version": "1.0.0",
  "author": "Jorex",
  "type": "module",
  "private": false,
  "main": "electron/dist/main.cjs",
  "scripts": {
    "build": "nuxt generate && node -e \"const fs = require('fs'); const path = require('path'); let html = fs.readFileSync('.output/public/index.html', 'utf8'); html = html.replace(/\\/_nuxt\\//g, './_nuxt/'); fs.writeFileSync('.output/public/index.html', html);\" && bun run electron:build",
    "dev": "nuxt dev",
    "electron:dev": "bun run electron:build && concurrently \"bun run dev\" \"wait-on http://localhost:3000 && cross-env NODE_ENV=development VITE_DEV_SERVER_URL=http://localhost:3000 electron .\"",
    "electron:dev2": "bun run electron:build && concurrently \"cross-env PORT=3002 bun run dev\" \"wait-on http://localhost:3002 && cross-env NODE_ENV=development VITE_DEV_SERVER_URL=http://localhost:3002 electron .\"",
    "electron:build": "tsc --project tsconfig.electron.json && node -e \"const fs = require('fs'); fs.renameSync('electron/dist/main.js', 'electron/dist/main.cjs'); fs.renameSync('electron/dist/preload.js', 'electron/dist/preload.cjs');\"",
    "electron:pack": "electron-builder --publish=never",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "electron": "bun run electron:build && electron .",
    "app:build": "bun run build && bun run electron:pack"
  },
  "dependencies": {
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@nuxtjs/tailwindcss": "^6.14.0",
    "concurrently": "^9.2.1",
    "cross-env": "^10.0.0",
    "electron": "^38.1.2",
    "electron-builder": "^26.0.12",
    "nuxt": "^4.1.2",
    "sass": "^1.93.1",
    "typescript": "^5.9.2",
    "wait-on": "^7.2.0"
  },
  "build": {
    "appId": "com.example.livechat",
    "productName": "Live Chat",
    "directories": {
      "output": "dist-electron"
    },
    "files": [
      "electron/dist/**",
      ".output/public/**"
    ],
    "win": {
      "target": "portable"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true
    }
  }
}
